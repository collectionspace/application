<project name="app-tenant-mgmt" default="clone-tenant" basedir=".">
  <description>Manage Application layer folders and files containing per-tenant configurations</description>
  
  <!-- Location of the 'tenants' directory for this CollectionSpace source code layer. -->
  <property environment="env" />
  <property name="src.dir" value="${basedir}" />
  <property name="resources.dir" value="${src.dir}/tomcat-main/src/main/resources"/>
  <property name="tenants.dir" value="${resources.dir}/tenants"/>
  
  <!-- Imports a set of utility routines for managing tenant folders
       from a separate Ant buildfile.
       See http://wiki.apache.org/ant/NewAntFeaturesInDetail/Import -->
  <import file="./tenant-utils-build.xml"/>
  
  <!-- Location of the settings file for the newly-cloned tenant. -->
  <property name="settings.file.name" value="settings.xml"/>
  <property name="template.settings.file"
    value="${tenants.dir}/${template.tenant.shortname}/${settings.file.name}"/>
  <property name="tenant.settings.file" value="${tenants.dir}/${tenant.shortname}/${settings.file.name}"/>
  
	<target name="bamboo">
		<ant antfile="war-entry/build.xml" target="bamboo" inheritAll="false" />
	</target>
	
  <!-- This target inherits from an existing target in the imported
       utility routines buildfile, and adds its own behavior specific to this
       CollectionSpace source code layer. -->
  <target name="clone-other-template-files"
    depends="tenant-utils.clone-other-template-files,
    clone-tenant-schema-config-file">
  </target>
  
  <target name="clone-tenant-schema-config-file">
    <copy file="${resources.dir}/${template.tenant.shortname}-tenant.xml"
       tofile="${resources.dir}/${tenant.shortname}-tenant.xml"/>
   </target>
   
   <!-- This target inherits from an existing target in the imported
        utility routines buildfile, and adds its own behavior specific to this
        CollectionSpace source code layer. -->
   <target name="rename-files-in-cloned-tenant" depends="tenant-utils.rename-files-in-cloned-tenant">
     <move todir="${tenants.dir}/${tenant.shortname}" includeemptydirs="false">
       <fileset dir="${tenants.dir}/${tenant.shortname}"/>
       <mapper type="regexp" from="^(.*?)${template.tenant.shortname}(.*)$" to="\1${tenant.shortname}\2"/>
     </move>
   </target>
  
  <!-- This target inherits from an (essentially empty) target in the imported
       utility routines buildfile, and adds its own behavior specific to this
       CollectionSpace source code layer. -->
  <target name="update-text-in-cloned-tenant"
    depends="tenant-utils.update-text-in-cloned-tenant,
    update-text-in-tenant-config,
    update-text-in-tenant-settings">
  </target>
  
  <target name="update-text-in-tenant-config">
    <!-- Update text in the tenant config file. -->
    <replace file="${resources.dir}/${tenant.shortname}-tenant.xml" token="${template.tenant.shortname}"
      value="${tenant.shortname}">
    </replace>
  </target>
  
  <target name="update-text-in-tenant-settings"
    depends="update-tenant-id-in-tenant-settings,
    update-disabled-flag-in-tenant-settings,
    update-tenant-internet-domain-in-tenant-settings,
    update-tenant-shortname-in-tenant-settings,
    update-repository-domain-and-name-in-tenant-settings">
  </target>
  
  <target name="update-tenant-id-in-tenant-settings">
    <replaceregexp
      file="${tenant.settings.file}"
      match="&lt;tenant&gt;(.*)&lt;/tenant&gt;"
      replace="&lt;tenant&gt;${tenant.id}&lt;/tenant&gt;">
    </replaceregexp>
    <replaceregexp
      file="${tenant.settings.file}"
      match="&lt;id&gt;(.*)&lt;/id&gt;"
      replace="&lt;id&gt;${tenant.id}&lt;/id&gt;">
    </replaceregexp>
  </target>
  
  <target name="update-disabled-flag-in-tenant-settings">
    <!-- Ensure that even if the template tenant is disabled, -->
    <!-- the new, cloned tenant will always be created as 'enabled'. -->
    <replaceregexp
      file="${tenant.settings.file}"
      match="&lt;create-disabled&gt;(.*)&lt;/create-disabled&gt;"
      replace="&lt;create-disabled&gt;false&lt;/create-disabled&gt;">
    </replaceregexp>
  </target>

  <target name="extract-template-tenant-internet-domain" depends="tenant-utils.check-template-properties">
    <!-- Will retrieve the template tenant's Internet domain from the text node at -->
    <!-- XPath /settings/persistence/service/tenant/name and store its value -->
    <!-- in a property of the same name, using dots as delimiters rather than slashes -->
    <xmlproperty file="${template.settings.file}"/>
    <property name="template.internet.domain" value="${settings.persistence.service.tenant.name}"/>
    <echo message="template.internet.domain=${template.internet.domain}"/>
  </target>
  
  <target name="update-tenant-internet-domain-in-tenant-settings"
    depends="extract-template-tenant-internet-domain">
   <!-- Note: this text replacement is brute-force and will even replace sub-strings,
        if found, so you'll need to ensure that the template tenant's Internet domain is a
        unique string: that it won't be inadvertently contained within text elsewhere. -->
   <!-- TODO: Perform more nuanced replacements to avoid the problem described above. 
        (See the Ant ReplaceRegExp task for one potential approach when doing so.) -->
    <replace file="${tenant.settings.file}" token="${template.internet.domain}"
      value="${tenant.internet.domain}">
    </replace>
  </target>
   
  <target name="update-tenant-shortname-in-tenant-settings">
   <!-- Note: this text replacement is brute-force and will even replace sub-strings,
        if found, so you'll need to ensure that the template tenant's shortname is a
        unique string: that it won't be inadvertently contained within text elsewhere. -->
    <replaceregexp
      file="${tenant.settings.file}"
      match="${template.tenant.shortname}"
      replace="${tenant.shortname}"
      flags="gi">
    </replaceregexp>
  </target>

  <target name="update-repository-domain-and-name-in-tenant-settings">
    <replaceregexp
      file="${tenant.settings.file}"
      match="&lt;repository&gt;\s*&lt;domain&gt;.*?&lt;/domain&gt;\s*&lt;name&gt;.*?&lt;/name&gt;"
      replace="&lt;repository&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;domain&gt;${tenant.shortname}&lt;/domain&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;name&gt;${tenant.shortname}&lt;/name&gt;"
      flags="m">
    </replaceregexp>

  </target>

  <!-- This target inherits from an (essentially empty) target in the imported
       utility routines buildfile, and adds its own behavior specific to this
       CollectionSpace source code layer. -->
  <target name="check-tenant-extended-properties" 
    depends="tenant-utils.check-tenant-extended-properties">
    <!-- ID of the new tenant to create -->
    <antcall target="check-property-is-defined">
      <param name="property-to-check" value="tenant.id"/>
    </antcall>
    <antcall target="check-property-value-is-not-blank">
      <param name="property-to-check" value="tenant.id"/>
      <param name="property-to-check-value" value="${tenant.id}"/>
    </antcall>
    <echo message="tenant.id=${tenant.id}"/>
    <!-- Internet domain of the new tenant to create -->
    <antcall target="check-property-is-defined">
      <param name="property-to-check" value="tenant.internet.domain"/>
    </antcall>
    <antcall target="check-property-value-is-not-blank">
      <param name="property-to-check" value="tenant.internet.domain"/>
      <param name="property-to-check-value" value="${tenant.internet.domain}"/>
    </antcall>
    <echo message="tenant.internet.domain=${tenant.internet.domain}"/>
  </target>
    
</project>